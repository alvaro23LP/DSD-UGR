/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct resultado {
	int errno;
	union {
		double resultado;
	} resultado_u;
};
typedef struct resultado resultado;

typedef struct {
	u_int vect_len;
	double *vect_val;
} vect;

struct suma_1_argument {
	double arg1;
	double arg2;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	double arg1;
	double arg2;
};
typedef struct resta_1_argument resta_1_argument;

struct multiplicacion_1_argument {
	double arg1;
	double arg2;
};
typedef struct multiplicacion_1_argument multiplicacion_1_argument;

struct division_1_argument {
	double arg1;
	double arg2;
};
typedef struct division_1_argument division_1_argument;

struct potencia_1_argument {
	double arg1;
	double arg2;
};
typedef struct potencia_1_argument potencia_1_argument;

struct logaritmo_1_argument {
	double arg1;
	double arg2;
};
typedef struct logaritmo_1_argument logaritmo_1_argument;

struct raiz_1_argument {
	double arg1;
	double arg2;
};
typedef struct raiz_1_argument raiz_1_argument;

struct suma_vectores_2_argument {
	vect arg1;
	vect arg2;
};
typedef struct suma_vectores_2_argument suma_vectores_2_argument;

struct resta_vectores_2_argument {
	vect arg1;
	vect arg2;
};
typedef struct resta_vectores_2_argument resta_vectores_2_argument;

struct producto_escalar_2_argument {
	vect arg1;
	vect arg2;
};
typedef struct producto_escalar_2_argument producto_escalar_2_argument;

struct producto_vectorial_2_argument {
	vect arg1;
	vect arg2;
};
typedef struct producto_vectorial_2_argument producto_vectorial_2_argument;

struct angulo_vectores_2_argument {
	vect arg1;
	vect arg2;
};
typedef struct angulo_vectores_2_argument angulo_vectores_2_argument;

struct comp_ortogonales_2_argument {
	vect arg1;
	vect arg2;
};
typedef struct comp_ortogonales_2_argument comp_ortogonales_2_argument;

struct producto_mixto_2_argument {
	vect arg1;
	vect arg2;
	vect arg3;
};
typedef struct producto_mixto_2_argument producto_mixto_2_argument;

#define CALCULADORA 0x20001123
#define CALCULADORA_BASICA 1

#if defined(__STDC__) || defined(__cplusplus)
#define suma 1
extern  resultado * suma_1(double , double , CLIENT *);
extern  resultado * suma_1_svc(double , double , struct svc_req *);
#define resta 2
extern  resultado * resta_1(double , double , CLIENT *);
extern  resultado * resta_1_svc(double , double , struct svc_req *);
#define multiplicacion 3
extern  resultado * multiplicacion_1(double , double , CLIENT *);
extern  resultado * multiplicacion_1_svc(double , double , struct svc_req *);
#define division 4
extern  resultado * division_1(double , double , CLIENT *);
extern  resultado * division_1_svc(double , double , struct svc_req *);
#define potencia 5
extern  resultado * potencia_1(double , double , CLIENT *);
extern  resultado * potencia_1_svc(double , double , struct svc_req *);
#define logaritmo 6
extern  resultado * logaritmo_1(double , double , CLIENT *);
extern  resultado * logaritmo_1_svc(double , double , struct svc_req *);
#define raiz 7
extern  resultado * raiz_1(double , double , CLIENT *);
extern  resultado * raiz_1_svc(double , double , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define suma 1
extern  resultado * suma_1();
extern  resultado * suma_1_svc();
#define resta 2
extern  resultado * resta_1();
extern  resultado * resta_1_svc();
#define multiplicacion 3
extern  resultado * multiplicacion_1();
extern  resultado * multiplicacion_1_svc();
#define division 4
extern  resultado * division_1();
extern  resultado * division_1_svc();
#define potencia 5
extern  resultado * potencia_1();
extern  resultado * potencia_1_svc();
#define logaritmo 6
extern  resultado * logaritmo_1();
extern  resultado * logaritmo_1_svc();
#define raiz 7
extern  resultado * raiz_1();
extern  resultado * raiz_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */
#define CALCULADORA_vect 2

#if defined(__STDC__) || defined(__cplusplus)
#define suma_vectores 1
extern  vect * suma_vectores_2(vect , vect , CLIENT *);
extern  vect * suma_vectores_2_svc(vect , vect , struct svc_req *);
#define resta_vectores 2
extern  vect * resta_vectores_2(vect , vect , CLIENT *);
extern  vect * resta_vectores_2_svc(vect , vect , struct svc_req *);
#define producto_escalar 3
extern  resultado * producto_escalar_2(vect , vect , CLIENT *);
extern  resultado * producto_escalar_2_svc(vect , vect , struct svc_req *);
#define producto_vectorial 4
extern  vect * producto_vectorial_2(vect , vect , CLIENT *);
extern  vect * producto_vectorial_2_svc(vect , vect , struct svc_req *);
#define norma 5
extern  resultado * norma_2(vect , CLIENT *);
extern  resultado * norma_2_svc(vect , struct svc_req *);
#define angulo_vectores 6
extern  resultado * angulo_vectores_2(vect , vect , CLIENT *);
extern  resultado * angulo_vectores_2_svc(vect , vect , struct svc_req *);
#define comp_ortogonales 7
extern  vect * comp_ortogonales_2(vect , vect , CLIENT *);
extern  vect * comp_ortogonales_2_svc(vect , vect , struct svc_req *);
#define producto_mixto 8
extern  resultado * producto_mixto_2(vect , vect , vect , CLIENT *);
extern  resultado * producto_mixto_2_svc(vect , vect , vect , struct svc_req *);
extern int calculadora_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define suma_vectores 1
extern  vect * suma_vectores_2();
extern  vect * suma_vectores_2_svc();
#define resta_vectores 2
extern  vect * resta_vectores_2();
extern  vect * resta_vectores_2_svc();
#define producto_escalar 3
extern  resultado * producto_escalar_2();
extern  resultado * producto_escalar_2_svc();
#define producto_vectorial 4
extern  vect * producto_vectorial_2();
extern  vect * producto_vectorial_2_svc();
#define norma 5
extern  resultado * norma_2();
extern  resultado * norma_2_svc();
#define angulo_vectores 6
extern  resultado * angulo_vectores_2();
extern  resultado * angulo_vectores_2_svc();
#define comp_ortogonales 7
extern  vect * comp_ortogonales_2();
extern  vect * comp_ortogonales_2_svc();
#define producto_mixto 8
extern  resultado * producto_mixto_2();
extern  resultado * producto_mixto_2_svc();
extern int calculadora_2_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_resultado (XDR *, resultado*);
extern  bool_t xdr_vect (XDR *, vect*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_multiplicacion_1_argument (XDR *, multiplicacion_1_argument*);
extern  bool_t xdr_division_1_argument (XDR *, division_1_argument*);
extern  bool_t xdr_potencia_1_argument (XDR *, potencia_1_argument*);
extern  bool_t xdr_logaritmo_1_argument (XDR *, logaritmo_1_argument*);
extern  bool_t xdr_raiz_1_argument (XDR *, raiz_1_argument*);
extern  bool_t xdr_suma_vectores_2_argument (XDR *, suma_vectores_2_argument*);
extern  bool_t xdr_resta_vectores_2_argument (XDR *, resta_vectores_2_argument*);
extern  bool_t xdr_producto_escalar_2_argument (XDR *, producto_escalar_2_argument*);
extern  bool_t xdr_producto_vectorial_2_argument (XDR *, producto_vectorial_2_argument*);
extern  bool_t xdr_angulo_vectores_2_argument (XDR *, angulo_vectores_2_argument*);
extern  bool_t xdr_comp_ortogonales_2_argument (XDR *, comp_ortogonales_2_argument*);
extern  bool_t xdr_producto_mixto_2_argument (XDR *, producto_mixto_2_argument*);

#else /* K&R C */
extern bool_t xdr_resultado ();
extern bool_t xdr_vect ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_multiplicacion_1_argument ();
extern bool_t xdr_division_1_argument ();
extern bool_t xdr_potencia_1_argument ();
extern bool_t xdr_logaritmo_1_argument ();
extern bool_t xdr_raiz_1_argument ();
extern bool_t xdr_suma_vectores_2_argument ();
extern bool_t xdr_resta_vectores_2_argument ();
extern bool_t xdr_producto_escalar_2_argument ();
extern bool_t xdr_producto_vectorial_2_argument ();
extern bool_t xdr_angulo_vectores_2_argument ();
extern bool_t xdr_comp_ortogonales_2_argument ();
extern bool_t xdr_producto_mixto_2_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
