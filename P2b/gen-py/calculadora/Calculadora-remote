#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora4 import Calculadora
from calculadora4.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  double suma(double num1, double num2)')
    print('  double resta(double num1, double num2)')
    print('  double multiplicacion(double num1, double num2)')
    print('  double division(double num1, double num2)')
    print('  double potencia(double base, double exponente)')
    print('  double logaritmo(double base, double num)')
    print('  double raiz(double base, double exponente)')
    print('  double seno(double num1)')
    print('  double coseno(double num1)')
    print('  double tangente(double num1)')
    print('  double conversion(double num1, string strn)')
    print('   suma_vectores( vect1,  vect2)')
    print('   resta_vectores( vect1,  vect2)')
    print('  double producto_escalar( vect1,  vect2)')
    print('   producto_vectorial( vect1,  vect2)')
    print('  double norma( vect1)')
    print('  double angulo_vectores( vect1,  vect2)')
    print('  double producto_mixto( vect1,  vect2,  vect3)')
    print('   suma_matrices( m1,  m2)')
    print('   resta_matrices( m1,  m2)')
    print('   producto_matrices( m1,  m2)')
    print('  double determinante( m1)')
    print('   inversa( m1)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'suma':
    if len(args) != 2:
        print('suma requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma(eval(args[0]), eval(args[1]),))

elif cmd == 'resta':
    if len(args) != 2:
        print('resta requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta(eval(args[0]), eval(args[1]),))

elif cmd == 'multiplicacion':
    if len(args) != 2:
        print('multiplicacion requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiplicacion(eval(args[0]), eval(args[1]),))

elif cmd == 'division':
    if len(args) != 2:
        print('division requires 2 args')
        sys.exit(1)
    pp.pprint(client.division(eval(args[0]), eval(args[1]),))

elif cmd == 'potencia':
    if len(args) != 2:
        print('potencia requires 2 args')
        sys.exit(1)
    pp.pprint(client.potencia(eval(args[0]), eval(args[1]),))

elif cmd == 'logaritmo':
    if len(args) != 2:
        print('logaritmo requires 2 args')
        sys.exit(1)
    pp.pprint(client.logaritmo(eval(args[0]), eval(args[1]),))

elif cmd == 'raiz':
    if len(args) != 2:
        print('raiz requires 2 args')
        sys.exit(1)
    pp.pprint(client.raiz(eval(args[0]), eval(args[1]),))

elif cmd == 'seno':
    if len(args) != 1:
        print('seno requires 1 args')
        sys.exit(1)
    pp.pprint(client.seno(eval(args[0]),))

elif cmd == 'coseno':
    if len(args) != 1:
        print('coseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.coseno(eval(args[0]),))

elif cmd == 'tangente':
    if len(args) != 1:
        print('tangente requires 1 args')
        sys.exit(1)
    pp.pprint(client.tangente(eval(args[0]),))

elif cmd == 'conversion':
    if len(args) != 2:
        print('conversion requires 2 args')
        sys.exit(1)
    pp.pprint(client.conversion(eval(args[0]), args[1],))

elif cmd == 'suma_vectores':
    if len(args) != 2:
        print('suma_vectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_vectores(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_vectores':
    if len(args) != 2:
        print('resta_vectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_vectores(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_escalar':
    if len(args) != 2:
        print('producto_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_vectorial':
    if len(args) != 2:
        print('producto_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'norma':
    if len(args) != 1:
        print('norma requires 1 args')
        sys.exit(1)
    pp.pprint(client.norma(eval(args[0]),))

elif cmd == 'angulo_vectores':
    if len(args) != 2:
        print('angulo_vectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.angulo_vectores(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_mixto':
    if len(args) != 3:
        print('producto_mixto requires 3 args')
        sys.exit(1)
    pp.pprint(client.producto_mixto(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'suma_matrices':
    if len(args) != 2:
        print('suma_matrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_matrices(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_matrices':
    if len(args) != 2:
        print('resta_matrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_matrices(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_matrices':
    if len(args) != 2:
        print('producto_matrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_matrices(eval(args[0]), eval(args[1]),))

elif cmd == 'determinante':
    if len(args) != 1:
        print('determinante requires 1 args')
        sys.exit(1)
    pp.pprint(client.determinante(eval(args[0]),))

elif cmd == 'inversa':
    if len(args) != 1:
        print('inversa requires 1 args')
        sys.exit(1)
    pp.pprint(client.inversa(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
